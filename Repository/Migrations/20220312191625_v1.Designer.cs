// <auto-generated />
using System;
using Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(BlogDB))]
    [Migration("20220312191625_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("DatabaseClassLibrary.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "",
                            MetaDescription = "Other category",
                            MetaKeywords = "Other",
                            MetaTitle = "Other",
                            Slug = "other",
                            Title = "Other"
                        });
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAddPost")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortContent")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Title");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewSize")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Welcome to first my blog",
                            Keywords = "blog, bloging, myblog",
                            Title = "My Blog",
                            ViewSize = 10
                        });
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageAvatarLocal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nickname");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Hello to my blog",
                            Email = "Admin@admin.com",
                            FullName = "Demo Demonovskii",
                            ImageAvatarLocal = "/images/avatar/demo.png",
                            Nickname = "demo",
                            Password = "BC6D22A4A4C4AC5E1A7C3E0DEA35B7FE1542D384CDDA25357AC5472263859F51"
                        });
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.Comment", b =>
                {
                    b.HasOne("DatabaseClassLibrary.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.Post", b =>
                {
                    b.HasOne("DatabaseClassLibrary.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DatabaseClassLibrary.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DatabaseClassLibrary.Models.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
